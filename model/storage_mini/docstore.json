{"docstore/metadata": {"75f87c6a-7f72-466f-9e24-499da53367be": {"doc_hash": "3f6223332667d0e52c6881d776bc0010193da92ec89b8d32354ee35385ca3998"}, "d6c2f05c-25af-47c5-9d82-b5f11941565d": {"doc_hash": "ba6e7678caa1ae4387d55406528409217b0a05a27e1397cd08d6b47e7a702ad4", "ref_doc_id": "75f87c6a-7f72-466f-9e24-499da53367be"}}, "docstore/data": {"d6c2f05c-25af-47c5-9d82-b5f11941565d": {"__data__": {"id_": "d6c2f05c-25af-47c5-9d82-b5f11941565d", "embedding": null, "metadata": {"file_path": "C:\\Users\\M ALI\\Desktop\\LawMadad\\model\\modelV2.py", "file_name": "modelV2.py", "file_type": "text/x-python", "file_size": 1954, "creation_date": "2024-11-22", "last_modified_date": "2024-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "75f87c6a-7f72-466f-9e24-499da53367be", "node_type": "4", "metadata": {"file_path": "C:\\Users\\M ALI\\Desktop\\LawMadad\\model\\modelV2.py", "file_name": "modelV2.py", "file_type": "text/x-python", "file_size": 1954, "creation_date": "2024-11-22", "last_modified_date": "2024-11-22"}, "hash": "3f6223332667d0e52c6881d776bc0010193da92ec89b8d32354ee35385ca3998", "class_name": "RelatedNodeInfo"}}, "text": "from fastapi import FastAPI\r\nfrom pydantic import BaseModel\r\nfrom pyngrok import ngrok\r\nimport warnings\r\nfrom llama_index.core import (\r\n    VectorStoreIndex,\r\n    SimpleDirectoryReader,\r\n    StorageContext,\r\n    ServiceContext,\r\n    load_index_from_storage\r\n)\r\nfrom llama_index.embeddings.huggingface import HuggingFaceEmbedding\r\nfrom llama_index.core.node_parser import SentenceSplitter\r\nfrom llama_index.llms.groq import Groq\r\n\r\nwarnings.filterwarnings('ignore')\r\n\r\napp = FastAPI()\r\n\r\n# Define the request model\r\nclass QueryRequest(BaseModel):\r\n    query: str\r\n\r\n# Set up the model\r\nGROQ_API_KEY = \"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\"\r\nreader = SimpleDirectoryReader(input_files=[\"C:\\\\Users\\\\M ALI\\\\Desktop\\\\LawMadad\\\\model\\\\modelV2.py\"])  # Update path\r\ndocuments = reader.load_data()\r\ntext_splitter = SentenceSplitter(chunk_size=1024, chunk_overlap=200)\r\nnodes = text_splitter.get_nodes_from_documents(documents, show_progress=True)\r\nembed_model = HuggingFaceEmbedding(model_name=\"sentence-transformers/all-MiniLM-L6-v2\")\r\nllm = Groq(model=\"llama-3.1-8b-instant\", api_key=GROQ_API_KEY)\r\nservice_context = ServiceContext.from_defaults(embed_model=embed_model, llm=llm)\r\nvector_index = VectorStoreIndex.from_documents(documents, show_progress=True, service_context=service_context, node_parser=nodes)\r\nvector_index.storage_context.persist(persist_dir=\"./storage_mini\")\r\nstorage_context = StorageContext.from_defaults(persist_dir=\"./storage_mini\")\r\nindex = load_index_from_storage(storage_context, service_context=service_context)\r\nquery_engine = index.as_query_engine(service_context=service_context)\r\n\r\n# Endpoint for querying the model\r\n@app.post(\"/query\")\r\nasync def query_model(request: QueryRequest):\r\n    query_text = request.query\r\n    response = query_engine.query(query_text)\r\n    return {\"response\": response.response}\r\n\r\nif __name__ == \"__main__\":\r\n    import uvicorn\r\n    uvicorn.run(app, host=\"0.0.0.0\", port=8000)", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1952, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/ref_doc_info": {"75f87c6a-7f72-466f-9e24-499da53367be": {"node_ids": ["d6c2f05c-25af-47c5-9d82-b5f11941565d"], "metadata": {"file_path": "C:\\Users\\M ALI\\Desktop\\LawMadad\\model\\modelV2.py", "file_name": "modelV2.py", "file_type": "text/x-python", "file_size": 1954, "creation_date": "2024-11-22", "last_modified_date": "2024-11-22"}}}}